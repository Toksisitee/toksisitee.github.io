"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[316],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=p(n),u=r,g=m["".concat(s,".").concat(u)]||m[u]||c[u]||l;return n?a.createElement(g,o(o({ref:t},d),{},{components:n})):a.createElement(g,o({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3123:function(e,t,n){n.d(t,{Z:function(){return i}});var a=n(7294),r=n(6010),l={note:a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},a.createElement("path",{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})),tip:a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},a.createElement("path",{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})),danger:a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},a.createElement("path",{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"})),info:a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},a.createElement("path",{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})),caution:a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},a.createElement("path",{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))},o={note:"secondary",tip:"success",danger:"danger",info:"info",caution:"warning"};function i(e){var t=e.children,n=e.type,i=e.title,s=void 0===i?n:i,p=e.icon,d=void 0===p?l[n]:p;return a.createElement("div",{className:(0,r.Z)("admonition","admonition-"+n,"alert","alert--"+o[n])},a.createElement("div",{className:"admonition-heading"},a.createElement("h5",null,a.createElement("span",{className:"admonition-icon"},d),s)),a.createElement("div",{className:"admonition-content"},t))}},5547:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return p},default:function(){return u},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return c}});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),o=n(3123),i=["components"],s={sidebar_position:1},p="Examples",d={unversionedId:"mv-script-examples",id:"mv-script-examples",title:"Examples",description:"Various code snippets that serve as an example! Feel free to copy and paste in your own projects.",source:"@site/docs/mv-script-examples.md",sourceDirName:".",slug:"/mv-script-examples",permalink:"/docs/mv-script-examples",editUrl:"https://github.com/Toksisitee/docs/mv-script-examples.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Quick Start",permalink:"/docs/mv-script-intro"},next:{title:"Changelog",permalink:"/docs/mv-script-changelog"}},c=[{value:"Iterating Over Objects",id:"iterating-over-objects",children:[{value:"Parameters Explained",id:"parameters-explained",children:[],level:3},{value:"ProcessThingsList",id:"processthingslist",children:[],level:3},{value:"ProcessThingsListModel",id:"processthingslistmodel",children:[],level:3},{value:"ProcessThingsListSpecial",id:"processthingslistspecial",children:[],level:3}],level:2},{value:"Map Search",id:"map-search",children:[{value:"ProcessMap",id:"processmap",children:[],level:3},{value:"ProcessMapWho",id:"processmapwho",children:[],level:3}],level:2},{value:"Bitwise Operators",id:"bitwise-operators",children:[{value:"Set Bit",id:"set-bit",children:[],level:3},{value:"Clear Bit",id:"clear-bit",children:[],level:3},{value:"Check Bit",id:"check-bit",children:[],level:3}],level:2}],m={toc:c};function u(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"examples"},"Examples"),(0,l.kt)("p",null,"Various code snippets that serve as an example! Feel free to copy and paste in your own projects. "),(0,l.kt)(o.Z,{type:"info",icon:"\ud83d\udc4b",title:"Contact",mdxType:"Admonition"},(0,l.kt)("p",null,"Looking for a specific example or simply to share feedback? Contact me at toxicity@thebeginning.uk.")),(0,l.kt)("h2",{id:"iterating-over-objects"},"Iterating Over Objects"),(0,l.kt)("p",null,"Game objects are cached to different lists for faster access. Multiverse provides multiple helper functions for iterating over game objects; these helpers are split into three different functions for optimization purposes."),(0,l.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},'Objects cannot be cached to multiple lists; therefore objects part of unique lists will not be found in a more "general" list. There are some exceptions for this rule, but for instance, the model ',(0,l.kt)("inlineCode",{parentName:"p"},"M_SHOT_SUPER_WARRIOR")," is only to be found by the ",(0,l.kt)("strong",{parentName:"p"},"ProcessThingsListSpecial")," function. One might expect to find the same object through ",(0,l.kt)("strong",{parentName:"p"},"ProcessThingsList")," with a ",(0,l.kt)("inlineCode",{parentName:"p"},"T_SHOT")," list."))),(0,l.kt)("h3",{id:"parameters-explained"},"Parameters Explained"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("a",{parentName:"strong",href:"../docs/mv-api/mv-enums#ubyte"},"UBYTE"))," ",(0,l.kt)("em",{parentName:"p"},"list"),(0,l.kt)("br",{parentName:"p"}),"\n","Refers to an object type list. Check out the enum ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("a",{parentName:"strong",href:"../docs/mv-api/mv-enums#types-1"},"types"))," for a full list of possible lists, but do note that some of them might not be available."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("a",{parentName:"strong",href:"../docs/mv-api/mv-enums#ubyte"},"UBYTE"))," ",(0,l.kt)("em",{parentName:"p"},"model"),(0,l.kt)("br",{parentName:"p"}),"\n","Refers to the object model we're looking for. This parameter is expected by ",(0,l.kt)("strong",{parentName:"p"},"ProcessThingsListModel"),". For example, we can pass a ",(0,l.kt)("inlineCode",{parentName:"p"},"T_SCENERY")," list with a ",(0,l.kt)("inlineCode",{parentName:"p"},"M_SCENERY_HEAD")," model. This would skip all the trees, rocks, plants, etc. which makes it quicker to find our Stonehead. Check out ",(0,l.kt)("a",{parentName:"p",href:"#processthingslistmodel"},"ProcessThingsListModel")," for a full list of supported List/Model combinations."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("a",{parentName:"strong",href:"../docs/mv-api/mv-enums#ubyte"},"UBYTE"))," ",(0,l.kt)("em",{parentName:"p"},"pn"),(0,l.kt)("br",{parentName:"p"}),"\n","Refers to the player number. Sometimes lists are subdivided further into owner lists. Do we really want to iterate over ",(0,l.kt)("em",{parentName:"p"},"all")," persons, or just Blue owned persons? ",(0,l.kt)("inlineCode",{parentName:"p"},"TRIBE_BLUE")," is player number 0, followed by ",(0,l.kt)("inlineCode",{parentName:"p"},"TRIBE_RED")," (1), ",(0,l.kt)("inlineCode",{parentName:"p"},"TRIBE_YELLOW")," (2) and finally ",(0,l.kt)("inlineCode",{parentName:"p"},"TRIBE_GREEN")," (3)."),(0,l.kt)("p",null,"std::function<",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("a",{parentName:"strong",href:"../docs/mv-api/mv-enums#bool"},"bool")),"(",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("a",{parentName:"strong",href:"../docs/mv-api/mv-structs#thing"},"Thing*")),")> ",(0,l.kt)("em",{parentName:"p"},"func"),(0,l.kt)("br",{parentName:"p"}),"\n","We must provide a function with a Thing","*"," parameter. For every Thing","*"," object found in the list, our function will be called and executed. We can ",(0,l.kt)("inlineCode",{parentName:"p"},"return false")," to stop the iteration, otherwise ",(0,l.kt)("inlineCode",{parentName:"p"},"return true")," to continue."),(0,l.kt)("h3",{id:"processthingslist"},"ProcessThingsList"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Iterating over all objects."),(0,l.kt)("br",{parentName:"p"}),"\n","We're not looking for something in particular, so we can pass the function some meaningless arguments which will default to a general search for ",(0,l.kt)("em",{parentName:"p"},"any")," valid object."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'--                list      pn  func\nProcessThingsList(-1,       -1, function(t)\n    Log(string.format("Object of Type: %i and Model: %i", t.Type, t.Model))\n    return true -- continue to next object\nend)\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Iterating over all Persons."),(0,l.kt)("br",{parentName:"p"}),"\n","We're starting our loop at ",(0,l.kt)("inlineCode",{parentName:"p"},"-1")," because Wildmen are Neutral."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"for pn=-1,3,1 do\n    ProcessThingsList(T_PERSON, pn, function(t)\n        t.u.Pers.Life = 0   -- kill off thing\n        return true         -- continue to next object\n    end)\nend\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Iterating over all Buildings."),(0,l.kt)("br",{parentName:"p"}),"\n","We are not going to find M_BUILDING_LIBRARY, as VoKs are part of a special list (",(0,l.kt)("strong",{parentName:"p"},"ProcessThingsListSpecial"),"). Neither will we find Prisons, as they're part of a separate list as well."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"for pn=TRIBE_BLUE,TRIBE_GREEN,1 do\n    ProcessThingsList(T_BUILDING, pn, function(t)\n        t.u.Bldg.Damaged    = 99999\n        return true         -- continue to next object\n    end)\nend\n")),(0,l.kt)("h3",{id:"processthingslistmodel"},"ProcessThingsListModel"),(0,l.kt)("p",null,"Iterating over all Trigger objects. We're making use of ",(0,l.kt)("strong",{parentName:"p"},"ProcessThingsListModel")," for the first time. The ",(0,l.kt)("em",{parentName:"p"},"pn")," parameter does not matter here since triggers are not subdivided in owner lists. "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'ProcessThingsListModel(T_GENERAL, M_GENERAL_TRIGGER, pn, function(t)\n    Log("TNum: " .. t.ThingNum)\n    return true         -- continue to next object\nend)\n')),(0,l.kt)("p",null,"At the time of writing this example, these are the supported list & model combinations:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"List"),(0,l.kt)("th",{parentName:"tr",align:null},"Model"),(0,l.kt)("th",{parentName:"tr",align:null},"Player Num"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"T_GENERAL"),(0,l.kt)("td",{parentName:"tr",align:null},"M_GENERAL_TRIGGER"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"Loop over trigger objects.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"T_GENERAL"),(0,l.kt)("td",{parentName:"tr",align:null},"-1"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"Loop over all objects of type T_GENERAL, except for objects already cached to different lists (e.g. Triggers).")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"T_SCENERY"),(0,l.kt)("td",{parentName:"tr",align:null},"M_SCENERY_HEAD"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"Loop over all worshippable objects (Stoneheads, Obelisk, Totems).")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"T_SCENERY"),(0,l.kt)("td",{parentName:"tr",align:null},"M_SCENERY_TREE_1"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"Loop over all trees.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"T_SCENERY"),(0,l.kt)("td",{parentName:"tr",align:null},"M_SCENERY_TREE_2"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"Loop over all trees.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"T_SCENERY"),(0,l.kt)("td",{parentName:"tr",align:null},"M_SCENERY_TREE_3"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"Loop over all trees.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"T_SCENERY"),(0,l.kt)("td",{parentName:"tr",align:null},"M_SCENERY_TREE_4"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"Loop over all trees.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"T_SCENERY"),(0,l.kt)("td",{parentName:"tr",align:null},"M_SCENERY_TREE_5"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"Loop over all trees.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"T_SCENERY"),(0,l.kt)("td",{parentName:"tr",align:null},"M_SCENERY_TREE_6"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"Loop over all trees.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"T_VEHICLE"),(0,l.kt)("td",{parentName:"tr",align:null},"M_VEHICLE_BOAT_1"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"Loop over all boats.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"T_VEHICLE"),(0,l.kt)("td",{parentName:"tr",align:null},"M_VEHICLE_BOAT_2"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"Loop over all boats.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"T_VEHICLE"),(0,l.kt)("td",{parentName:"tr",align:null},"M_VEHICLE_AIRSHIP_1"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"Loop over all balloons.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"T_VEHICLE"),(0,l.kt)("td",{parentName:"tr",align:null},"M_VEHICLE_AIRSHIP_2"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"Loop over all balloons.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"T_EFFECT"),(0,l.kt)("td",{parentName:"tr",align:null},"-1"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"Loop over all effect objects, except for objects already cached to different lists (e.g. Swamps)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"T_EFFECT"),(0,l.kt)("td",{parentName:"tr",align:null},"M_EFFECT_BUILDING_SENTRY"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"These effects are cached in an unique list.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"T_EFFECT"),(0,l.kt)("td",{parentName:"tr",align:null},"M_EFFECT_BUILDING_SHOCK_SENTRY"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"These effects are cached in an unique list.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"T_EFFECT"),(0,l.kt)("td",{parentName:"tr",align:null},"M_EFFECT_BUILDING_PROTECTION_SENTRY"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"These effects are cached in an unique list.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"T_EFFECT"),(0,l.kt)("td",{parentName:"tr",align:null},"M_EFFECT_BUILDING_AIR_SENTRY"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"These effects are cached in an unique list.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"T_EFFECT"),(0,l.kt)("td",{parentName:"tr",align:null},"M_EFFECT_RAIN_SPAWNER"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"These effects are cached in an unique list.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"T_EFFECT"),(0,l.kt)("td",{parentName:"tr",align:null},"M_EFFECT_SWAMP"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"These effects are cached in an unique list.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"T_EFFECT"),(0,l.kt)("td",{parentName:"tr",align:null},"M_EFFECT_PERMANENT_OBJECT"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"These effects are cached in an unique list.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"T_EFFECT"),(0,l.kt)("td",{parentName:"tr",align:null},"M_EFFECT_PICKUP_OBJECT"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"These effects are cached in an unique list.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"T_INTERNAL"),(0,l.kt)("td",{parentName:"tr",align:null},"M_INTERNAL_FORMATION"),(0,l.kt)("td",{parentName:"tr",align:null},"0-3"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"T_INTERNAL"),(0,l.kt)("td",{parentName:"tr",align:null},"M_INTERNAL_FIGHT"),(0,l.kt)("td",{parentName:"tr",align:null},"0-3"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"T_INTERNAL"),(0,l.kt)("td",{parentName:"tr",align:null},"M_INTERNAL_PRE_FIGHT"),(0,l.kt)("td",{parentName:"tr",align:null},"0-3"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h3",{id:"processthingslistspecial"},"ProcessThingsListSpecial"),(0,l.kt)("p",null,"This will iterate over a special list. These models are exclusive to this list: M_BUILDING_LIBRARY, M_EFFECT_ATLANTIS_INVOKE, M_INTERNAL_GUARD_CONTROL and M_SHOT_SUPER_WARRIOR.  "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'ProcessThingsListSpecial(function(t)\n    if (t.Type == T_SHOT and t.Model == M_SHOT_SUPER_WARRIOR) then\n        Log("Found M_SHOT_SUPER_WARRIOR");\n    end\n    return true -- continue to next object\nend)\n')),(0,l.kt)("h2",{id:"map-search"},"Map Search"),(0,l.kt)("p",null,"Processing the world cells at a specific position is trivial and something any scripter will want to do at some point. By far the most useful functions are ",(0,l.kt)("strong",{parentName:"p"},"ProcessMap")," and ",(0,l.kt)("strong",{parentName:"p"},"ProcessMapWho"),"."),(0,l.kt)("h3",{id:"processmap"},"ProcessMap"),(0,l.kt)("p",null,"Given an initial position, the search function will gradually expand depending on the radius given and in the process execute the function provided by the user. We can ",(0,l.kt)("inlineCode",{parentName:"p"},"return false")," to stop the next cell search/advance or ",(0,l.kt)("inlineCode",{parentName:"p"},"return true")," to continue."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function smoke_aura(pn, rad)\n    -- Get Shaman.\n    local shaman = getShaman(pn)\n    -- Ensure the Shaman is a valid object.\n    if (shaman ~= nil) then\n        -- Convert her Coord3D position to a Map Idx position.\n        local pos = world_coord3d_to_map_idx(shaman.Pos.D3)\n        -- Process the map in a circular motion.\n        ProcessMap(CIRCULAR, 0, 0, rad, pos, function(me)\n            -- Create an empty Coord2D variable.\n            local c2d = Coord2D.new()\n            -- Convert the MapElement we receive from ProcessMap to Coord2D.\n            map_ptr_to_world_coord2d(me, c2d)\n            -- Create an object at the location.\n            create_thing(T_EFFECT, M_EFFECT_SMOKE, pn, c2d)\n            -- Continue to next cell..\n            return true \n        end)\n    end\nend\n")),(0,l.kt)("h3",{id:"processmapwho"},"ProcessMapWho"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"ProcessMapWho"),"'s last parameter is a function requiring a ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("a",{parentName:"strong",href:"../docs/mv-api/mv-structs#mapelement"},"MapElement","*"))," parameter. Ergo, it's a good idea to make use of the passed argument to combine the functionality of ",(0,l.kt)("strong",{parentName:"p"},"ProcessMap")," with ",(0,l.kt)("strong",{parentName:"p"},"ProcessMapWho")," \u2014 the latter being used to process objects on the cell."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function process_wildmen(pn, rad)\n    -- Get Shaman.\n    local shaman = getShaman(pn)\n    -- Ensure Shaman object is valid.\n    if (shaman ~= nil) then\n        -- Convert her Coord3D position to a Map Idx position.\n        local pos = world_coord3d_to_map_idx(shaman.Pos.D3)\n        -- Process the map in a circular motion.\n        ProcessMap(CIRCULAR, 0, 0, rad, pos, function(me)\n            -- ProcessMapWho will iterate over the objects at the location, \n            -- so we're required to pass a MapElement alongside a function argument,\n            -- which allows ProcessMapWho to subsequently pass us the Thing* object it has found.\n            ProcessMapWho(me, function(t)\n                -- Check the object's Type and Model.\n                if (t.Type == T_PERSON and t.Model == M_PERSON_WILD) then\n                    -- Found a Wildman person!\n                    Log(\"Found Wildman \" .. t.ThingNum)\n                end\n                -- Continue to next object..\n                return true\n            end)\n            -- Continue to next cell..\n            return true\n        end)\n    end\nend\n")),(0,l.kt)("p",null,"In this example, the search will stop as soon as the first Wildman is found."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'function process_wildmen(pos, rad)\n    local found = false\n    ProcessMap(SQUARE, 0, 0, rad, pos, function(me)\n        ProcessMapWho(me, function(t)\n            if (t.Type == T_PERSON and t.Model == M_PERSON_WILD) then\n                Log("Found wildman " .. t.ThingNum)\n                found = true\n                return false\n            end\n            return true\n        end)\n        return not found\n    end)\nend\n')),(0,l.kt)("h2",{id:"bitwise-operators"},"Bitwise Operators"),(0,l.kt)("p",null,"More than seven years ago, Lua 5.3 introduced native bitwise operators. If you've worked with Lua before you might take them as granted, but Multiverse uses LuaJIT! Thus, we have to make use of the BitOp module \u2014 accessible through the ",(0,l.kt)("inlineCode",{parentName:"p"},"bit")," keyword. There are many instances when you have to work with flags, so let's take a look at some helper functions we can declare."),(0,l.kt)("h3",{id:"set-bit"},"Set Bit"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function EnableFlag(_f1, _f2)\n    if ((bit.band(_f1, _f2)) == 0) then\n        _f1 = bit.bor(_f1, _f2)\n    end\n    return _f1\nend\n\nconvert = get_spells_type_info(M_SPELL_CONVERT_WILD)\nconvert.Flags = EnableFlag(convert.Flags, SPF_CYCLE_SPELL)\n")),(0,l.kt)("h3",{id:"clear-bit"},"Clear Bit"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function DisableFlag(_f1, _f2)\n    if ((bit.band(_f1, _f2)) == _f2) then\n        _f1 = bit.band(_f1, bit.bnot(_f2))\n    end\n    return _f1\nend\n\nconvert = get_spells_type_info(M_SPELL_CONVERT_WILD)\nconvert.Flags = DisableFlag(convert.Flags, SPF_CYCLE_SPELL)\n")),(0,l.kt)("h3",{id:"check-bit"},"Check Bit"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'function HasFlag(_f1, _f2)\n    if ((bit.band(_f1, _f2)) == _f2) then\n        return true\n    end\n    return false\nend\n\nconvert = get_spells_type_info(M_SPELL_CONVERT_WILD);\nif (HasFlag(convert.Flags, SPF_CYCLE_SPELL)) then\n    Log("Flag SPF_CYCLE_SPELL is set!")\nend\n')))}u.isMDXComponent=!0}}]);